/**
 * SGC-Miage V1.0
 * JavaInUse API reference for developers
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Connaissance } from '../model/connaissance';
import { ConnaissanceRequest } from '../model/connaissanceRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ConnaissanceControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creer une nouvelle connaissance dans la base de donnees
     * 
     * @param connaissance connaissance
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createConnaissanceUsingPUT(connaissance: Connaissance, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public createConnaissanceUsingPUT(connaissance: Connaissance, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public createConnaissanceUsingPUT(connaissance: Connaissance, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public createConnaissanceUsingPUT(connaissance: Connaissance, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (connaissance === null || connaissance === undefined) {
            throw new Error('Required parameter connaissance was null or undefined when calling createConnaissanceUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<boolean>(`${this.basePath}/api/sgc/knowledge/create`,
            connaissance,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Supprime connaissance presente en base de donnees
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteConnaissanceByIdUsingDELETE(id: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteConnaissanceByIdUsingDELETE(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteConnaissanceByIdUsingDELETE(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteConnaissanceByIdUsingDELETE(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteConnaissanceByIdUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<boolean>(`${this.basePath}/api/sgc/knowledge/delete/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retourne l&#39;ensemble des connaissances disponible
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllConnaissanceUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Connaissance>>;
    public getAllConnaissanceUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Connaissance>>>;
    public getAllConnaissanceUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Connaissance>>>;
    public getAllConnaissanceUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Connaissance>>(`${this.basePath}/api/sgc/knowledge/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retourne un ensemble de connaissance en fonction de parametre de recherche
     * 
     * @param query query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConnaissanceByQueryUsingGET(query: ConnaissanceRequest, observe?: 'body', reportProgress?: boolean): Observable<Array<Connaissance>>;
    public getConnaissanceByQueryUsingGET(query: ConnaissanceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Connaissance>>>;
    public getConnaissanceByQueryUsingGET(query: ConnaissanceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Connaissance>>>;
    public getConnaissanceByQueryUsingGET(query: ConnaissanceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling getConnaissanceByQueryUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.get<Array<Connaissance>>(`${this.basePath}/api/sgc/knowledge/query`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retourne la connaissance associee a l&#39;id
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConnaissanceUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<Connaissance>;
    public getConnaissanceUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Connaissance>>;
    public getConnaissanceUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Connaissance>>;
    public getConnaissanceUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getConnaissanceUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Connaissance>(`${this.basePath}/api/sgc/knowledge/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Mets a jour les informations d&#39;une connaissance
     * 
     * @param connaissance connaissance
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateConnaissanceUsingPOST(connaissance: Connaissance, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public updateConnaissanceUsingPOST(connaissance: Connaissance, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public updateConnaissanceUsingPOST(connaissance: Connaissance, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public updateConnaissanceUsingPOST(connaissance: Connaissance, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (connaissance === null || connaissance === undefined) {
            throw new Error('Required parameter connaissance was null or undefined when calling updateConnaissanceUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/api/sgc/knowledge/update`,
            connaissance,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
